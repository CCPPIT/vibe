// ุงุณุชูุฑุงุฏ Zod ููุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช (data validation)
import { z } from 'zod';
// ุงุณุชูุฑุงุฏ ุงูุฅุฌุฑุงุก ุงูุฃุณุงุณู ูุฏุงูุฉ ุฅูุดุงุก ุงูุฑุงูุชุฑ ูู ููู ุงูุชููุฆุฉ
import { baseProcedure, createTRPCRouter } from '../init';

// ุฅูุดุงุก ุฑุงูุชุฑ ุงูุชุทุจูู ุงูุฑุฆูุณู ุจุงุณุชุฎุฏุงู createTRPCRouter
export const appRouter = createTRPCRouter({
  // ุชุนุฑูู ุฅุฌุฑุงุก (endpoint) ุจุงุณู "hello"
  hello: baseProcedure
    // ุชุนุฑูู ุดูู ุงูุจูุงูุงุช ุงููุฏุฎูุฉ (input validation) ุจุงุณุชุฎุฏุงู Zod
    .input(
      z.object({
        text: z.string(), // ุญูู ูุตู ูุทููุจ
      }),
    )
    // ุชุนุฑูู query (ุทูุจ ููุญุตูู ุนูู ุจูุงูุงุช)
    .query((opts) => {
      // opts ุชุญุชูู ุนูู:
      // - input: ุงูุจูุงูุงุช ุงููุฏุฎูุฉ ุจุนุฏ ุงูุชุญูู ูู ุตุญุชูุง
      // - ctx: ุงูุณูุงู (ูู createTRPCContext)
      
      return {
        greeting: `hello ${opts.input.text}`, // ุฅุฑุฌุงุน ุฑุณุงูุฉ ุชุฑุญูุจ
      };
    }),
    
  // ูููู ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงูุฅุฌุฑุงุกุงุช ููุง:
  // getUser: baseProcedure.input(...).query(...),
  // createUser: baseProcedure.input(...).mutation(...),
});

// ุชุตุฏูุฑ ููุน TypeScript ููุฑุงูุชุฑ ูุงุณุชุฎุฏุงูู ุนูู ุฌุงูุจ ุงูุนููู
// ูุฐุง ูุณูุญ ูู TypeScript ุจูุญุต ุฃููุงุน ุงูุจูุงูุงุช ุชููุงุฆูุงู
export type AppRouter = typeof appRouter;

// ๐ ุดุฑุญ ุงูููุงููู ุงูุฃุณุงุณูุฉ:

// ๐๏ธ ูููู ุงูุฑุงูุชุฑ:
// - appRouter: ุงูุฑุงูุชุฑ ุงูุฑุฆูุณู ุงูุฐู ูุฌูุน ูู ุงูุฅุฌุฑุงุกุงุช
// - ูููู ุชูุณููู ุฅูู ุฑูุงุชุฑ ูุฑุนูุฉ ููุชูุธูู

// ๐ Zod ููุชุญูู ูู ุงูุตุญุฉ:
// - z.object(): ุชุญุฏุฏ ุดูู ุงููุงุฆู ุงููุชููุน
// - z.string(): ุชุฃูุฏ ุฃู ุงูุญูู ูุตู
// - ูููู ุฅุถุงูุฉ: .min(), .max(), .email(), etc.

// ๐ ุฃููุงุน ุงูุฅุฌุฑุงุกุงุช:
// - .query(): ูุทูุจุงุช GET (ูุฑุงุกุฉ ุงูุจูุงูุงุช)
// - .mutation(): ูุทูุจุงุช POST/PUT/DELETE (ุชุนุฏูู ุงูุจูุงูุงุช)

// ๐ฏ ูุซุงู ุนูู ุชูุณูุน ุงูุฑุงูุชุฑ:

/*
export const appRouter = createTRPCRouter({
  user: createTRPCRouter({
    get: baseProcedure
      .input(z.object({ id: z.string() }))
      .query(async (opts) => {
        // ุฌูุจ user ูู database
        return { user: { id: opts.input.id, name: 'John' } };
      }),
      
    create: baseProcedure
      .input(z.object({ name: z.string().min(2) }))
      .mutation(async (opts) => {
        // ุฅูุดุงุก user ูู database
        return { success: true, userId: '123' };
      }),
  }),
  
  post: createTRPCRouter({
    list: baseProcedure.query(async () => {
      // ุฌูุจ ูุงุฆูุฉ posts
      return { posts: [] };
    }),
  }),
});
*/

// โก ุงูุงุณุชุฎุฏุงู ุนูู ุงูุนููู:

/*
import { trpc } from './trpc-client';

// ุงุณุชุฏุนุงุก query
const { data } = trpc.hello.useQuery({ text: 'world' });
console.log(data.greeting); // "hello world"

// ุงุณุชุฏุนุงุก mutation
const mutation = trpc.user.create.useMutation();
mutation.mutate({ name: 'John' });
*/

// ๐ก๏ธ ููุงุฆุฏ ุงุณุชุฎุฏุงู Zod:
// - ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ุชููุงุฆูุงู
// - ุฃููุงุน TypeScript ูููุฏุฉ ุชููุงุฆูุงู
// - ููุน ูุฌูุงุช injection ูุชุญุณูู ุงูุฃูุงู

// ๐ ุงูุชูุณูุน ุงููุณุชูุจูู:
// - ูููู ุฅุถุงูุฉ middleware ูููุตุงุฏูุฉ
// - ูููู ุชูุณูู ุงูุฑุงูุชุฑ ุฅูู ูููุงุช ูุชุนุฏุฏุฉ
// - ุฏุนู ุฃููุงุน ุจูุงูุงุช ูุนูุฏุฉ ุนุจุฑ superjson

// ๐ก ูุตุงุฆุญ:
// 1. ุงุณุชุฎุฏู ุฃุณูุงุก ูุตูููุฉ ููุฅุฌุฑุงุกุงุช
// 2. ุญุฏุฏ ุชุญูู ุตุงุฑู ููุจูุงูุงุช ุงููุฏุฎูุฉ
// 3. ูุณู ุงูุฑุงูุชุฑ ุฅูู ูุญุฏุงุช ูููุน ุงูุชุถุฎู