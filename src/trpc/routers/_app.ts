// ุงุณุชูุฑุงุฏ Zod ููุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช (data validation)
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import {  z } from 'zod';
// ุงุณุชูุฑุงุฏ ุงูุฅุฌุฑุงุก ุงูุฃุณุงุณู ูุฏุงูุฉ ุฅูุดุงุก ุงูุฑุงูุชุฑ ูู ููู ุงูุชููุฆุฉ
import { baseProcedure, createTRPCRouter } from '../init';
import { inngest } from '@/inngest/client';

// ุฅูุดุงุก ุฑุงูุชุฑ ุงูุชุทุจูู ุงูุฑุฆูุณู ุจุงุณุชุฎุฏุงู createTRPCRouter
export const appRouter = createTRPCRouter({

  invoke:baseProcedure
  .input(
    z.object({
      text:z.string(),
    })

  ).mutation(async({input})=>{
    await inngest.send({
      name:"test/hello.world",
      data:{
        email:input.text
      }
    })


  }),
  // ุชุนุฑูู ุฅุฌุฑุงุก (endpoint) ุจุงุณู "hello"
  hello: baseProcedure
    // ุชุนุฑูู ุดูู ุงูุจูุงูุงุช ุงููุฏุฎูุฉ (input validation) ุจุงุณุชุฎุฏุงู Zod
    .input(
      z.object({
        text: z.string(), // ุญูู ูุตู ูุทููุจ
      }),
    )
    // ุชุนุฑูู query (ุทูุจ ููุญุตูู ุนูู ุจูุงูุงุช - ูุดุจู GET request)
    .query((opts) => {
      // opts ุชุญุชูู ุนูู:
      // - input: ุงูุจูุงูุงุช ุงููุฏุฎูุฉ ุจุนุฏ ุงูุชุญูู ูู ุตุญุชูุง
      // - ctx: ุงูุณูุงู (ูู createTRPCContext) ูุซู ุจูุงูุงุช ุงููุณุชุฎุฏู
      
      return {
        greeting: `hello ${opts.input.text}`, // ุฅุฑุฌุงุน ุฑุณุงูุฉ ุชุฑุญูุจ
      };
    }),
    
  // ูููู ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงูุฅุฌุฑุงุกุงุช ููุง:
  // getUser: baseProcedure.input(...).query(...),
  // createUser: baseProcedure.input(...).mutation(...),
});

// ุชุตุฏูุฑ ููุน TypeScript ููุฑุงูุชุฑ ูุงุณุชุฎุฏุงูู ุนูู ุฌุงูุจ ุงูุนููู
// ูุฐุง ูุณูุญ ูู TypeScript ุจูุญุต ุฃููุงุน ุงูุจูุงูุงุช ุชููุงุฆูุงู ุจูู ุงูุฎุงุฏู ูุงูุนููู
export type AppRouter = typeof appRouter;

// ๐ ุดุฑุญ ุงูููุงููู ุงูุฃุณุงุณูุฉ:

// ๐๏ธ ูููู ุงูุฑุงูุชุฑ:
// - appRouter: ุงูุฑุงูุชุฑ ุงูุฑุฆูุณู ุงูุฐู ูุฌูุน ูู ุงูุฅุฌุฑุงุกุงุช
// - ูููู ุชูุณููู ุฅูู ุฑูุงุชุฑ ูุฑุนูุฉ ููุชูุธูู

// ๐ Zod ููุชุญูู ูู ุงูุตุญุฉ:
// - z.object(): ุชุญุฏุฏ ุดูู ุงููุงุฆู ุงููุชููุน
// - z.string(): ุชุฃูุฏ ุฃู ุงูุญูู ูุตู
// - ูููู ุฅุถุงูุฉ: .min(), .max(), .email(), etc.

// ๐ ุฃููุงุน ุงูุฅุฌุฑุงุกุงุช:
// - .query(): ูุทูุจุงุช GET (ูุฑุงุกุฉ ุงูุจูุงูุงุช)
// - .mutation(): ูุทูุจุงุช POST/PUT/DELETE (ุชุนุฏูู ุงูุจูุงูุงุช)

// ๐ฏ ูุซุงู ุนูู ุชูุณูุน ุงูุฑุงูุชุฑ:

/*
export const appRouter = createTRPCRouter({
  user: createTRPCRouter({
    // ุงุณุชุนูุงู ููุญุตูู ุนูู user by ID
    getById: baseProcedure
      .input(z.object({ id: z.string() }))
      .query(async (opts) => {
        // ูุญุงูุงุฉ ุฌูุจ user ูู database
        return { 
          user: { 
            id: opts.input.id, 
            name: 'John Doe',
            email: 'john@example.com'
          } 
        };
      }),
      
    // ุทูุฑุฉ ูุฅูุดุงุก user ุฌุฏูุฏ
    create: baseProcedure
      .input(z.object({ 
        name: z.string().min(2), 
        email: z.string().email() 
      }))
      .mutation(async (opts) => {
        // ูุญุงูุงุฉ ุฅูุดุงุก user ูู database
        return { 
          success: true, 
          userId: 'user_123',
          message: 'User created successfully'
        };
      }),
  }),
});
*/

// โก ุงูุงุณุชุฎุฏุงู ุนูู ุงูุนููู:

/*
import { trpc } from './trpc-client';

// ุงุณุชุฏุนุงุก query
const { data, isLoading } = trpc.hello.useQuery({ text: 'world' });
console.log(data?.greeting); // "hello world"

// ุงุณุชุฏุนุงุก mutation
const mutation = trpc.user.create.useMutation();
mutation.mutate({ 
  name: 'John', 
  email: 'john@example.com' 
});
*/

// ๐ก๏ธ ููุงุฆุฏ ุงุณุชุฎุฏุงู Zod:
// - ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช ุชููุงุฆูุงู ุนูู ุงูุฎุงุฏู ูุงูุนููู
// - ุฃููุงุน TypeScript ูููุฏุฉ ุชููุงุฆูุงู
// - ููุน ูุฌูุงุช injection ูุชุญุณูู ุงูุฃูุงู
// - ุฑุณุงุฆู ุฎุทุฃ ูุงุถุญุฉ ููุจูุงูุงุช ุบูุฑ ุงูุตุงูุญุฉ

// ๐ ุงูุชูุณูุน ุงููุณุชูุจูู:

// 1. ุฅุถุงูุฉ middleware ูููุตุงุฏูุฉ:
/*
export const authenticatedProcedure = baseProcedure.use((opts) => {
  if (!opts.ctx.userId) {
    throw new Error('ุบูุฑ ูุตุฑุญ ุจุงูุฏุฎูู');
  }
  return opts.next();
});
*/

// 2. ุชูุณูู ุงูุฑุงูุชุฑ ุฅูู ูููุงุช ูุชุนุฏุฏุฉ:
/*
// ูู routers/user.ts
export const userRouter = createTRPCRouter({ ... });

// ูู routers/_app.ts
import { userRouter } from './user';
export const appRouter = createTRPCRouter({
  user: userRouter,
});
*/

// 3. ุฏุนู ุฃููุงุน ุจูุงูุงุช ูุนูุฏุฉ ุนุจุฑ superjson

// ๐ก ูุตุงุฆุญ:
// 1. ุงุณุชุฎุฏู ุฃุณูุงุก ูุตูููุฉ ููุฅุฌุฑุงุกุงุช (getUserById ุจุฏูุงู ูู getUser)
// 2. ุญุฏุฏ ุชุญูู ุตุงุฑู ููุจูุงูุงุช ุงููุฏุฎูุฉ ุจุงุณุชุฎุฏุงู Zod
// 3. ูุณู ุงูุฑุงูุชุฑ ุฅูู ูุญุฏุงุช ูููุน ุชุถุฎู ุงูููู
// 4. ุงุณุชุฎุฏู ุงูุฃุฎุทุงุก ุงููุตููุฉ ููุจูุงูุงุช ุบูุฑ ุงูุตุงูุญุฉ

// ๐ ูุซุงู ุนูู ุงูุทูุจุงุช:

// GET request ููุงุณุชุนูุงู:
// /api/trpc/hello?input={"text":"world"}

// POST request ููุทูุฑุฉ:
// POST /api/trpc/user.create
// Body: {"name":"John","email":"john@example.com"}

// โ ุงููุฎุฑุฌุงุช ุงููุชููุนุฉ:
// { success: true, userId: "user_123", message: "User created successfully" }